from django.db import models
from django.contrib.auth import get_user_model
from django.utils.translation import gettext_lazy as _

User = get_user_model()


class Report(models.Model):
    """Financial and analytics reports"""
    
    REPORT_TYPES = [
        ('financial', _('Financial Report')),
        ('user_analytics', _('User Analytics')),
        ('course_analytics', _('Course Analytics')),
        ('test_analytics', _('Test Analytics')),
        ('session_analytics', _('Session Analytics')),
        ('sales', _('Sales Report')),
    ]
    
    name = models.CharField(max_length=200, verbose_name=_('Name'))
    report_type = models.CharField(max_length=30, choices=REPORT_TYPES, verbose_name=_('Report Type'))
    description = models.TextField(blank=True, null=True, verbose_name=_('Description'))
    data = models.JSONField(default=dict, verbose_name=_('Report Data'))
    filters = models.JSONField(default=dict, verbose_name=_('Filters Applied'))
    generated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='generated_reports', verbose_name=_('Generated By'))
    generated_at = models.DateTimeField(auto_now_add=True, verbose_name=_('Generated At'))
    period_start = models.DateField(verbose_name=_('Period Start'))
    period_end = models.DateField(verbose_name=_('Period End'))
    
    class Meta:
        verbose_name = _('Report')
        verbose_name_plural = _('Reports')
        ordering = ['-generated_at']
    
    def __str__(self):
        return f"{self.name} - {self.get_report_type_display()}"


class DashboardWidget(models.Model):
    """Dashboard widgets for admin panel"""
    
    WIDGET_TYPES = [
        ('chart', _('Chart')),
        ('metric', _('Metric')),
        ('table', _('Table')),
        ('list', _('List')),
    ]
    
    name = models.CharField(max_length=100, verbose_name=_('Name'))
    widget_type = models.CharField(max_length=20, choices=WIDGET_TYPES, verbose_name=_('Widget Type'))
    title = models.CharField(max_length=200, verbose_name=_('Title'))
    description = models.TextField(blank=True, null=True, verbose_name=_('Description'))
    config = models.JSONField(default=dict, verbose_name=_('Configuration'))
    position_x = models.PositiveIntegerField(default=0, verbose_name=_('Position X'))
    position_y = models.PositiveIntegerField(default=0, verbose_name=_('Position Y'))
    width = models.PositiveIntegerField(default=4, verbose_name=_('Width'))
    height = models.PositiveIntegerField(default=3, verbose_name=_('Height'))
    is_active = models.BooleanField(default=True, verbose_name=_('Is Active'))
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = _('Dashboard Widget')
        verbose_name_plural = _('Dashboard Widgets')
        ordering = ['position_y', 'position_x']
    
    def __str__(self):
        return self.name


class AnalyticsEvent(models.Model):
    """Analytics events tracking"""
    
    EVENT_TYPES = [
        ('page_view', _('Page View')),
        ('course_enrollment', _('Course Enrollment')),
        ('test_completion', _('Test Completion')),
        ('session_booking', _('Session Booking')),
        ('payment', _('Payment')),
        ('user_registration', _('User Registration')),
        ('login', _('Login')),
        ('logout', _('Logout')),
    ]
    
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='analytics_events', verbose_name=_('User'))
    event_type = models.CharField(max_length=30, choices=EVENT_TYPES, verbose_name=_('Event Type'))
    event_data = models.JSONField(default=dict, verbose_name=_('Event Data'))
    ip_address = models.GenericIPAddressField(blank=True, null=True, verbose_name=_('IP Address'))
    user_agent = models.TextField(blank=True, null=True, verbose_name=_('User Agent'))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_('Created At'))
    
    class Meta:
        verbose_name = _('Analytics Event')
        verbose_name_plural = _('Analytics Events')
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.get_event_type_display()} - {self.created_at}"